// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  engineType      = "library"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  @@id([userId, credentialID])
}

model Post {
  id                 String   @id @default(uuid())
  categoryId         String
  title              String
  company            String
  user_id            String?
  status             Int
  status_hint        Int?
  description        String
  tags               String[]
  app_url            String?
  community_url      String?
  banner_url         String?
  icon_url           String?
  created_at         DateTime @default(now())
  updated_at         DateTime @default(now())
  update_description String?
  category           Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  statusRel          Status   @relation(fields: [status], references: [id])
  upvotes            Upvote[]
}

model Upvote {
  id      Int     @id @default(autoincrement())
  user_id String?
  post_id String?
  Post    Post?   @relation(fields: [post_id], references: [id])
}

model Status {
  id    Int    @id @default(autoincrement())
  index Int    @default(autoincrement())
  name  String
  color String
  text  String
  icon  String
  posts Post[]
}

model Category {
  id    String @id @default(uuid())
  index Int    @default(autoincrement())
  name  String
  icon  String
  posts Post[]
}
